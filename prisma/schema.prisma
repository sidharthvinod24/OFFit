// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum paymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  username         String    @unique
  clerkID          String    @unique
  phoneNumber      String?
  image            String?
  address          String?
  role             String?
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  cart             Cart?
  orders           Order[]
  payments         Payment[]
}

model Cart {
  id     String     @id @default(cuid())
  userID String     @unique
  user   User       @relation(fields: [userID], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  category    String
  brand       String
  description String
  image       String
  stock       Int
  price       Float
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
}

model Order {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    PaymentStatus
  createdAt DateTime      @default(now())
  payment   Payment?
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id                String        @id @default(cuid())
  userID            String
  orderID           String        @unique
  stripe_payment_id String        @unique
  amount            Float
  currency          String?
  status            PaymentStatus
  createdAt         DateTime      @default(now())

  user  User  @relation(fields: [userID], references: [id])
  order Order @relation(fields: [orderID], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
